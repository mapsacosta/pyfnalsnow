#!/usr/bin/python

#########################################################################
### Configuration #######################################################
#########################################################################

config_file = '/etc/snow/config.yaml'

#########################################################################
### Declarations ########################################################
#########################################################################

import pyfnalsnow
import getpass, optparse, pprint, sys

description = "query for sc_req_item objects in SNOW"
usage = "%prog [options] subject"

#########################################################################
### Subroutines #########################################################
#########################################################################

def findGroups():
    if opt.group == 'all': groups = pyfnalsnow.userInGroups(opt.user)
    else:                  groups = [ opt.group ]
    return groups

#########################################################################
### main () #############################################################
#########################################################################

def main():
    global p
    p = optparse.OptionParser (usage = usage, description = description)
    p.add_option ('--debug', dest='debug', action='store_true', default=False)
    p.add_option ('--config', dest='config', action='store',
        default=config_file)
    p.add_option ('--group', dest='group', action='store', default='all')
    p.add_option ('--user', dest='user', action='store', 
        default=getpass.getuser())
    p.add_option ('--query', dest='query', action='store', default='group',
        choices=['assign', 'group', 'submit'])
    p.add_option ('--subquery', dest='subquery', action='store', default='open',
        choices=['closed', 'open', 'unresolved'])

    global opt
    opt, args = p.parse_args()

    if len(args) != 0:
        p.print_help()
        sys.exit(-1)

    config = pyfnalsnow.pyfnalsnow_config(opt.config)
    snow = pyfnalsnow.connect()


    ret = []

    if opt.debug: print "querying %s/%s" % (opt.query, opt.subquery)

    if opt.query == 'group':
        for g in findGroups():
            ret.append("== Unresolved RITMs assigned to group '%s' ==" % g)

            for t in pyfnalsnow.tktSearch('sc_req_item', group=g, \
                status='unresolved'):
                summary = pyfnalsnow.tktStringSummary(t)
                ret.append('')
                ret.extend(summary)
            ret.append('')

    elif opt.query == 'assign':
        ret.append("== Unresolved RITMs assigned to user '%s' ==" % opt.user)
        for t in pyfnalsnow.tktSearch('sc_req_item', assigned=opt.user,
                status=opt.subquery):
            summary = pyfnalsnow.tktStringSummary(t)
            ret.append('')
            ret.extend(summary)
        ret.append('')

    elif opt.query == 'submit':
        ret.append("== Unresolved RITMs submitted by user '%s' ==" % opt.user)
        for t in pyfnalsnow.tktSearch('sc_req_item', submit=opt.user,
                status=opt.subquery):
            summary = pyfnalsnow.tktStringSummary(t)
            ret.append('')
            ret.extend(summary)
        ret.append('')


    else:
        print "unknown query type: %s" % opt.query
        sys.exit(-1)

    print '\n'.join(ret)
    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################

"""

=head1 NAME

snow-ritm-list - search for sc_req_item objects by current status

=head1 SYNOPSIS

[...]

=head1 USAGE

snow-ritm queries Service Now (SNOW) to pull down data about a specific
sc_req_item object (RITM), and prints the output to STDOUT.  

=head1 OPTIONS

=over 4

=item --config CONFIG_FILE

Where should we load our SNOW config data?  Defaults to
F</etc/snow/config.yaml>.

=item --debug

If set, prints some debugging data.

==item --type [base|debug|worklog|audit]

What kind of output do you want to see?  Defaults to 'base'.

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 COPYRIGHT

Copyright 2017, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
