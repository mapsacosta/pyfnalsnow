#!/usr/bin/python

#########################################################################
### Configuration #######################################################
#########################################################################

config_file = '/etc/snow/config.yaml'

#########################################################################
### Declarations ########################################################
#########################################################################

import pyfnalsnow
import getpass, optparse, sys

description = "query for incident objects in SNOW"
usage = "%prog [options] subject"

template = {
    'catalog_item': {
        'sys_id': '18c27227042950008638553dd6544037',
        'vars': {}
    }
}


#########################################################################
### Subroutines #########################################################
#########################################################################

#########################################################################
### main () #############################################################
#########################################################################

def main():
    global p
    p = optparse.OptionParser (usage = usage, description = description)
    p.add_option ('--debug', dest='debug', action='store_true', default=False)
    p.add_option ('--config', dest='config', action='store',
        default=config_file)
    p.add_option ('--group', dest='group', action='store', default='')
    p.add_option ('--user', dest='user', action='store', 
        default=getpass.getuser())

    global opt
    opt, args = p.parse_args()

    if len(args) < 1:
        p.print_help()
        sys.exit(-1)

    subject = ' '.join(args).rstrip()
    text = '\n'.join(sys.stdin.readlines()).rstrip()

    config = pyfnalsnow.pyfnalsnow_config(opt.config)
    snow = pyfnalsnow.connect()

    ret = []

    u = pyfnalsnow.userByUsername(opt.user)
    if not u:
        print "no matching SNOW user: %s" % opt.user
        sys.exit(-1)

    base = template
    #            "short_description": string,
    #        "requested_for": sys_id (as a string) of a person,
    #        "description": string
    base['catalog_item']['vars']['short_description'] = subject
    base['catalog_item']['vars']['description'] = text
    # base['catalog_item']['vars']['requested_for'] = u['sys_id']
    base['catalog_item']['vars']['requested_for'] = u['user_name']
    if opt.group != '':
        base['catalog_item']['vars']['assignment_group'] = opt.group

    # ret = pyfnalsnow.tktCreate('request', base)
    ret = pyfnalsnow.tktCreate('request', base)
    print ret

    sys.exit(0)

if __name__ == '__main__':
    main()

#########################################################################
### POD Documentation ###################################################
#########################################################################

"""

=head1 NAME

snow-ritm-list - search for sc_req_item objects by current status

=head1 SYNOPSIS

B<snow-ritm-list>

B<snow-ritm-list> --group 'Service Desk'

B<snow-ritm-list> --query group --user esimm

B<snow-ritm-list> --query assign --user tskirvin

B<snow-ritm-list> --query submit --user tskirvin

=head1 USAGE

snow-ritm queries Service Now (SNOW) to pull down data about a specific
sc_req_item object (RITM), and prints the output to STDOUT.  

=head1 OPTIONS

=over 4

=item --config CONFIG_FILE

Where should we load our SNOW config data?  Defaults to
F</etc/snow/config.yaml>.

=item --debug

If set, prints some debugging data.

=item --group I<group>

Query for tickets associated with a given group.  The default is to search
for each group associated with the selected/default user.

=item --query I<type>

What kind of search output do you want to see?  Defaults to 'group'.

=over 2

=item assign

Searches for tickets assigned to the selected username.

=item group

Searches for tickets in the selected group.  Default.

=item submit

Searches for tickets submitted by the selected username.

=back

=item --subquery I<query>

How do you want to modify the kind of search?  Default: 'unresolved'

=over 2

=item closed

Show closed tickets.

=item open

Show open tickets.

=item unresolved

Show unresolved tickets.

=back

=item --user I<username>

Selects the user for which we will query.  Defaults to the invoker.

=back

=head1 AUTHOR

Tim Skirvin <tskirvin@fnal.gov>

=head1 COPYRIGHT

Copyright 2017, Fermi National Accelerator Laboratory

This program is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.

=cut

"""
